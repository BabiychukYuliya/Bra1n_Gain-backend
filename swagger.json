{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.2",
    "title": "Goose Track Documentation",
    "description": "Our application is a powerful task management tool designed to help users efficiently plan and track their daily tasks. With it, users will be able to organize their work, set tasks for certain days and monitor progress. The application has a handy calendar that allows users to assign tasks to specific dates. They will be able to see all scheduled tasks for a given day and manage their time efficiently.\n\nUsers can create accounts in the application to have access to its functionality. Registration provides a secure and unique identification name for each user. Authentication and authorization provide data protection and differentiation of access rights between users. Encryption of passwords and identification using tokens will ensure the security of user accounts.\n\nOur application adheres to high security standards, offering the user a reliable and secure environment for managing tasks. We strive to provide ease of use and convenience without forgetting the importance of data security.\n\n<strong>Main functionality includes: </strong> \n\n- registration, \n\n- login, \n\n- authorization, \n\n- viewing and creating feedback about the application, \n\n- creating, editing and viewing: outstanding, in progress and completed tasks, \n\n- displaying statistics for a month or a day for a specific type of task.\n\n<strong>Main technology stack:</strong>\n\nNode.js - a JavaScript runtime that allows you to run JavaScript code on the server.\n\n Express.js - minimalistic and flexible framework for developing web applications on Node.js.\n\n MongoDB - flexible and scalable NoSQL database.\n\n Mongoose - an object document model (ODM) for Node.js that provides an easy way to interact with the MongoDB database.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    { "url": "http://localhost:3000", "description": "Development server" },
    {
      "url": "https://bra1n-gain-backend.onrender.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Reviews",
      "description": "Reviews endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks endpoints"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "409": {
            "description": "Email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorRegister"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorLogin"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/profile": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update user profile",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/profile/pass": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update user password",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: email or password is wrong"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews/own": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get own review",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundReview"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "summary": "Add own review",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorAddOwnReview"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Update own review",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundReview"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete own review",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundReview"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get tasks",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "example": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorFetchTasks"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorAddTask"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get task by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorProccessingTask"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorProccessingTask"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorProccessingTask"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}/category": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Change task category",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorProccessingTask"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "maxlength": 16,
            "example": "John Johnson"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "123456789"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjViMjRhM2E1OTY0MzYzMzM1ZTNkMGM3ZCIsImlhdCI6MTYzMDUwNDIyNCwiZXhwIjoxNjMwNTk2NjI0fQ.C6b9LlsNFlrM6Ggr98hWe2fF_Damih9MZhsfwXZj9Ks"
          },
          "user": {
            "type": "object",
            "description": "User data",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "maxlength": 16,
                "example": "John Johnson"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
                "example": "john@example.com"
              },
              "avatarUrl": {
                "type": "string",
                "description": "User's avatar Url"
              },
              "createdAt": {
                "type": "string",
                "description": "User's create date",
                "example": "2023-07-04T14:20:17.132Z"
              }
            },
            "required": ["name", "email", "avatarUrl"]
          }
        },
        "required": ["token", "user"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "1123456789"
          }
        },
        "required": ["email", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "maxlength": 16,
                "example": "John Johnson"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
                "example": "john@example.com"
              }
            },
            "required": ["name", "email"]
          }
        },
        "required": ["token", "user"]
      },
      "GetCurrentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response text",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "Response code",
            "format": "int32",
            "example": 200
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "maxlength": 16,
                "example": "John Johnson"
              },
              "birthday": {
                "type": "string",
                "description": "User's date of birth",
                "pattern": "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/((19[3-9][0-9])|(20[0-2][0-9])|2030)$",
                "example": "30/08/1995"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
                "example": "john@example.com"
              },
              "phone": {
                "type": "string",
                "description": "User's phone number",
                "pattern": "^\\+\\d{12}$",
                "example": "+380123456789"
              },
              "skype": {
                "type": "string",
                "description": "User's skype",
                "maxlength": 16,
                "example": "+380123456789"
              },
              "avatarUrl": {
                "type": "string",
                "description": "User's avatar Url"
              }
            },
            "required": [
              "name",
              "birthday",
              "email",
              "phone",
              "skype",
              "avatarUrl"
            ]
          },
          "token": {
            "type": "string",
            "description": "User's Token"
          }
        },
        "required": ["status", "code", "user", "token"]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Logout succeess"
          }
        },
        "required": ["message"]
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "maxlength": 16,
            "example": "John Johnson"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "example": "john@example.com"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "pattern": "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/((19[3-9][0-9])|(20[0-2][0-9])|2030)$",
            "example": "30/08/1995"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "pattern": "^\\+\\d{12}$",
            "example": "+380123456789"
          },
          "skype": {
            "type": "string",
            "description": "User's skype",
            "maxlength": 16,
            "example": "+380123456789"
          }
        }
      },
      "UpdateProfileResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "maxlength": 16,
                "example": "John Johnson"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
                "example": "john@example.com"
              },
              "birthday": {
                "type": "string",
                "description": "User's birthday",
                "pattern": "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/((19[3-9][0-9])|(20[0-2][0-9])|2030)$",
                "example": "30/08/1995"
              },
              "phone": {
                "type": "string",
                "description": "User's phone number",
                "pattern": "^\\+\\d{12}$",
                "example": "+380123456789"
              },
              "skype": {
                "type": "string",
                "description": "User's skype",
                "maxlength": 16,
                "example": "+380123456789"
              },
              "avatarUrl": {
                "type": "string",
                "description": "User's avatar Url"
              }
            },
            "required": [
              "name",
              "email",
              "birthday",
              "phone",
              "skype",
              "avatarUrl"
            ]
          }
        },
        "required": ["data"]
      },
      "PasswordUpdateRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "example": "123456"
          },
          "newPassword": {
            "type": "string",
            "description": "New user's password",
            "minLength": 6,
            "example": "123456789"
          }
        },
        "required": ["email", "password", "newPassword"]
      },
      "PasswordUpdateResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "example": "john@example.com"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Change password success"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Review id",
            "example": "31d9792ab5a6b4a1a06dd56b"
          },
          "name": {
            "type": "string",
            "description": "Reviewer name",
            "example": "John Johnson"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Reviewer avatar Url",
            "example": "https://res.cloudinary.com/example/image/upload/123456/avatar.jpg"
          },
          "rate": {
            "type": "number",
            "description": "Reviewer rate",
            "enum": [1, 2, 3, 4, 5],
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "Reviewer comment",
            "example": "This is a comment"
          },
          "owner": {
            "type": "string",
            "description": "User's id who left the review",
            "example": "31d9792ab5a6b4a1a06dd56b"
          },
          "createdAt": {
            "type": "string",
            "description": "Review creation time",
            "format": "date-time",
            "example": "2023-06-24T19:29:20.003+00:00"
          },
          "updatedAt": {
            "type": "string",
            "description": "Review update time",
            "format": "date-time",
            "example": "2023-06-24T19:29:20.003+00:00"
          }
        }
      },
      "ReviewInput": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "number",
            "description": "Reviewer rate",
            "enum": [1, 2, 3, 4, 5],
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "Reviewer comment",
            "example": "This is a comment"
          }
        },
        "required": ["rate", "comment"]
      },
      "Task": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Task id",
            "example": "60d9792ab4a6b4a2a06dd50a"
          },
          "title": {
            "type": "string",
            "description": "Task title",
            "example": "Task Title"
          },
          "date": {
            "type": "string",
            "description": "Task creation date",
            "example": "2023-06-24"
          },
          "start": {
            "type": "string",
            "description": "Task start time",
            "example": "10:00"
          },
          "end": {
            "type": "string",
            "description": "Task end time",
            "example": "11:00"
          },
          "priority": {
            "type": "string",
            "description": "Task execution priority",
            "enum": ["low", "medium", "high"],
            "example": "low"
          },
          "category": {
            "type": "string",
            "description": "Task execution progress",
            "enum": ["to-do", "in-progress", "done"],
            "example": "to-do"
          },
          "owner": {
            "type": "string",
            "description": "Id owner of task",
            "example": "60d9792ab4a6b4a2a06dd50b"
          }
        }
      },
      "TaskInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "descroption": "Task title",
            "maxLength": 250,
            "example": "Task Title"
          },
          "date": {
            "type": "string",
            "description": "Task creation date",
            "pattern": "[1-9][0-9][0-9]{2}-([0][1-9]|[1][0-2])-([1-2][0-9]|[0][1-9]|[3][0-1])",
            "minLength": 10,
            "maxLength": 10,
            "example": "2023-06-24"
          },
          "start": {
            "type": "string",
            "description": "Task start time",
            "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$",
            "minLength": 5,
            "maxLength": 5,
            "example": "10:00"
          },
          "end": {
            "type": "string",
            "description": "Task end time",
            "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$",
            "minLength": 5,
            "maxLength": 5,
            "example": "11:00"
          },
          "priority": {
            "type": "string",
            "description": "Task execution priority",
            "enum": ["low", "medium", "high"],
            "example": "low"
          },
          "category": {
            "type": "string",
            "description": "Task execution progress",
            "enum": ["to-do", "in-progress", "done"],
            "example": "to-do"
          }
        },
        "required": ["title", "date", "start", "end", "priority", "category"]
      },
      "CategoryInput": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Task execution progress",
            "enum": ["to-do", "in-progress", "done"],
            "example": "in-progress"
          }
        },
        "required": ["category"]
      },
      "errorRegister": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email already in use"
          }
        }
      },
      "errorLogin": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email or password is wrong"
          }
        }
      },
      "errorAddOwnReview": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "You have already left a review"
          }
        }
      },
      "errorNotFoundReview": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Review not found or does not exist"
          }
        }
      },
      "errorFetchTasks": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unable to fetch tasks"
          }
        }
      },
      "errorProccessingTask": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unable to find task"
          }
        }
      },
      "errorAddTask": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unable to save to the database"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
